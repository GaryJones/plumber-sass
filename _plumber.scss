// *** PLUMBER - Real baseline grids with SASS ***

// Sets the origin of the leadings to the baseline
// Override it to set the origin to the edges of the text block
$plumber-leading-from-baseline: true !default;

@mixin plumber(
	$font-size,
	$line-height,
	$leading-top,
	$leading-bottom,
	$grid-height: $plumber-grid-height,
	$baseline-height: $plumber-baseline-height
) {
	// *** VALIDATE PARAMETERS ***
	@if $font-size <= 0 {
		@error '$font-size parameter must be a positive number, got #{$font-size} instead';
	}	
	@if not plumber-is-positive-integer($line-height) {
		@error '$line-height parameter must be a positive integer, got #{$line-height} instead';
	}
	@if not plumber-is-natural-number($leading-top) {
		@error '$leading-top parameter must be a non-negative integer, got #{$leading-top} instead.';
	}
	@if not plumber-is-natural-number($leading-bottom) {
		@error '$leading-bottom parameter must be a non-negative integer, got #{$leading-bottom} instead';
	}
	@if unitless($grid-height) or $grid-height < 0 {
		@error '$grid-height parameter must be a positive unit, got #{$grid-height} instead';
	}
	@if not (unitless($baseline-height) and $baseline-height >= 0 and $baseline-height < 1) {
		@error '$baseline-height parameter must be a number between 0 and 1, got #{$baseline-height} instead';
	}

	// *** CALCULATE BASELINE CORRECTION ***
	// the distance of the original baseline from the bottom
	$baseline-from-bottom: ($line-height - $font-size) / 2 + ($font-size * $baseline-height);
	// the corrected baseline will be on the nearest gridline
	$corrected-baseline: round($baseline-from-bottom);
	// the difference between the original and the corrected baseline
	$baseline-difference: $corrected-baseline - $baseline-from-bottom;

	// *** CALCULATE LEADING ORIGINS ***
	// leadings can be measured either from the edges of the text block…
	$leading-top-origin: 0;
	$leading-bottom-origin: 0;
	// …or from the baseline
	@if ($plumber-leading-from-baseline == true) {
		$leading-top-origin: $line-height - $corrected-baseline;
		$leading-bottom-origin: $corrected-baseline;
	}

	// *** APPLY BASELINE CORRECTION, TOP LEADING ***
	// the top margin is calculated from the specified top leading and the baseline correction
	$margin-top: $leading-top - $leading-top-origin - $baseline-difference;
	$padding-top: 0;

	// *** COMPENSATE FOR BASELINE CORRECTION, BOTTOM LEADING ***
	$padding-bottom: null;
	$margin-bottom: null;
	// bottom padding and margin depend on the direction of the baseline correction
	@if $baseline-difference < 0 {
		// the baseline was moved down to the next gridline
		// add the remaining distance to reach the next gridline
		$padding-bottom: 1 + $baseline-difference;
		// add bottom leading and remove the 1 excess grid height that comes from pushing down
		$margin-bottom: $leading-bottom - $leading-bottom-origin - 1;
	} @else {
		// the baseline was moved up to the previous gridline or is on a gridline
		// add the same difference to the bottom to reach the next gridline
		$padding-bottom: $baseline-difference;
		// add bottom leading
		$margin-bottom: $leading-bottom - $leading-bottom-origin;
	}
	
	// *** CSS OUTPUT ***
	font-size: $font-size * $grid-height;
	line-height: $line-height * $grid-height;
	margin-top: $margin-top * $grid-height;
	padding-top: $padding-top * $grid-height;
	padding-bottom: $padding-bottom * $grid-height;
	margin-bottom: $margin-bottom * $grid-height;
}

// Check if a value is a non-negative integer
@function plumber-is-natural-number($value) {
	@return (unitless($value) and $value == round($value) and $value >= 0);
}
// Check if a value is a positive integer
@function plumber-is-positive-integer($value) {
	@return (unitless($value) and $value == round($value) and $value > 0);
}